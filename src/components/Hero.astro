---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

type Props = {
  src: ImageMetadata | string;
  alt: string;
  widths?: number[];
  sizes?: string;
  quality?: number;
  class?: string;
  style?: string;
  fill?: boolean; // occupy parent via absolute positioning (no aspect-ratio)
  ratio?: number; // fallback aspect ratio (width/height) when src is string
};

const {
  src,
  alt,
  widths = [480, 768, 1024, 1280, 1536, 1920, 2560],
  sizes = '100vw',
  quality = 90,
  class: className = '',
  style = '',
  fill = false,
  ratio,
} = Astro.props as Props;
---

<style>
  .hero-image {
    display: block;
    position: relative;
    inline-size: 100%;
    block-size: auto;
    overflow: hidden;
    background-color: transparent;
  }

  .hero-image :where(img, picture) {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
  }
  
  /* Ensure image paints immediately without flicker */
  .hero-image img {
    background-color: transparent;
  }
</style>

{typeof src !== 'string' ? (
  <figure
    class={`hero-image ${className}`}
    style={`${fill ? '' : `aspect-ratio: ${src.width} / ${src.height};`} ${style}`}
  >
    <Picture
      src={src}
      alt={alt}
      formats={['avif', 'webp']}
      widths={widths}
      sizes={sizes}
      quality={quality}
      loading="eager"
      decoding="sync"
      fetchpriority="high"
    />
  </figure>
) : (
  <figure
    class={`hero-image ${className}`}
    style={`${fill ? '' : `aspect-ratio: ${ratio ?? 16 / 9};`} ${style}`}
  >
    <img
      src={src}
      alt={alt}
      loading="eager"
      decoding="sync"
      fetchpriority="high"
      style="inline-size:100%; block-size:100%; object-fit:cover; display:block; background-color:transparent;"
    />
  </figure>
)}


